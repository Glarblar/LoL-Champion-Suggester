#Process:
###Grab winrates for currently played champions D+
###Grab most played champs in Elo
#Order your champs by winrate to most played in Elo
#Note any which have a negative winrate
#Suggest Champions to pickup for bad matchups


import requests
import Champkeys as keys
import csv
import RiotConsts as Consts

# This section sets up our tables that we need
GGChamp_Names = []
GGChamp_IDS = []
Playrate = [['Champion', 'Play Rate', 'Role Rate', 'Percent played in Role']]
Playrate_Names = [['Champion', 'Play Rate', 'Role Rate', 'Percent played in Role']]
GGList_1_ID = [['Champion 1', 'Win Rate', 'Champion 2', 'Total Games']]
GGList_1_NAME = [['Champion 1', 'Win Rate', 'Champion 2', 'Total Games']]

# This section takes inputs from the user
GGtoken = (str)(raw_input('What is your Champion.GG API Key? '))
GGRole = (str)(raw_input('Which Role do you play in?  '))
GGRole = GGRole.upper()
Champnum = (input('How many Champions do you want to compare? '))
for z in range(0,Champnum):
    GGChamp = (str)(raw_input('What Champion do you play?  '))
    GGChamp_Names.append(GGChamp)
    GGChamp_IDS.append(keys.KEYSCHAMP[GGChamp])
GGask = (str)(raw_input('Would you like in input an Elo? (Yes or No)  '))
if GGask == 'No':
    Playerelo = ''
else:
    ELO = (str)(raw_input('Which then? BRONZE, SILVER, GOLD, PLATINUM  '))
    ELO = ELO.upper()
    Playerelo = "&elo=%s" % (ELO)
GGElo = (str)(raw_input('Which Tier do you want to compare to: Bronze, Silver, Gold, or Platinum? '))
GGElo = GGElo.upper()
GGLimit = (input('How many champion matchups do you want to compare? '))

# A Double Check of all our Tables
print (GGChamp_Names)
print (GGChamp_IDS)
print (Playrate)
print (Playrate_Names)
print (GGList_1_ID)
print (GGList_1_NAME)

#This section does the request calls for data from Champion.gg API and creates tables and a .csv file
def champmatchuprequest(GGChamp1_ID, GGRole, Playerelo, GGtoken, GGLimit):
    R = requests.get('http://api.champion.gg/v2/champions/{ID}/{Role}/matchups?{playerelo}&api_key={APIKEY}&limit={Limit}'.format(
        ID=GGChamp1_ID,
        Role=GGRole,
        playerelo=Playerelo,
        APIKEY=GGtoken,
        Limit=GGLimit
        )
    )
    print (R.url)
    print (R.json())

    for x in range(0,GGLimit):
        try:
            t=R.json()[x]
        except IndexError:
            break
        Champ1=R.json()[x]['champ1_id']
        Champ1_name=keys.KEYSID[str(Champ1)]
        Champ2=R.json()[x]['champ2_id']
        Champ2_name=keys.KEYSID[str(Champ2)]
        Champ1_WR=R.json()[x]['champ1']['winrate']*100
        Champ2_WR=R.json()[x]['champ2']['winrate']*100
        TotalGames=(R.json()[x]['champ2']['wins']+R.json()[x]['champ1']['wins'])
        #print "Champion: " + str(Champ1)
        #print "Winrate: " + str(Champ1_WR)
        #print "Against: " + str(Champ2)
        #print "Total Games: " + str(TotalGames)
        #print "Time for the next one!"
        if str(Champ1) == str(GGChamp1_ID):
            GGList_1_ID.append([Champ1,Champ1_WR,Champ2,TotalGames])
            GGList_1_NAME.append([Champ1_name,Champ1_WR,Champ2_name,TotalGames])
        else:
            GGList_1_ID.append([Champ2,Champ2_WR,Champ1,TotalGames])
            GGList_1_NAME.append([Champ2_name,Champ2_WR,Champ1_name,TotalGames])

    with open("Matchups1.csv","wb") as f:
        writer = csv.writer(f)
        writer.writerows(GGList_1_NAME)
def playraterequest(GGtoken, GGRole, GGElo):
    T = requests.get('http://api.champion.gg/v2/champions?{playerelo}&champData=playrate,role&api_key={APIKEY}&limit={Limit}&sort=role-desc'.format(
        playerelo='elo=' + GGElo,
        APIKEY=GGtoken,
        Limit=1000
        )
    )
    print (T.url)
    print (T.json())

    for y in range(0, 1000):
        try:
            t = T.json()[y]
        except IndexError:
            break
        if str(T.json()[y]['role']) == str(GGRole):
            PRchamp = T.json()[y]['championId']
            PRchamp_name = keys.KEYSID[str('PRchamp')]
            PRplayrate = T.json()[y]['playRate']
            PRroleplayed = T.json()[y]['percentRolePlayed']
            PRrolerate = PRplayrate * PRroleplayed
            Playrate.append([PRchamp_name, PRplayrate, PRroleplayed, PRrolerate])
            Playrate_Names.append([])
        else:
            continue

    with open("Playrates.csv", "wb") as f:
        writer = csv.writer(f)
        writer.writerows(Playrate_Names)

# Our Execution of the Functions we created
playraterequest(GGtoken, GGRole, GGElo)
for ID in range(0,Champnum):
    champmatchuprequest(GGChamp_IDS[ID], GGRole, Playerelo, GGtoken, GGLimit)

# A Double Check of all our Tables
print (GGChamp_Names)
print (GGChamp_IDS)
print (Playrate)
print (Playrate_Names)
print (GGList_1_ID)
print (GGList_1_NAME)
