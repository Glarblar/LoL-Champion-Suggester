#Process:
#Grab winrates for currently played champions D+
#Grab most played champs in Elo
#   http://api.champion.gg/v2/champions?&elo=SILVER&api_key=GGtoken&limit=200
#Order your champs by winrate to most played in Elo
#Note any which have a negative winrate
#Suggest Champions to pickup for bad matchups


import requests
import Champkeys as keys
import RiotConsts as Consts


#class ChampAPI(object):
#
#    def __init__(self, Number, Position, Rank):
#        self.ID = Number
#        self.Role = Position
#        self.Elo = Rank
#
#    def _request(self):
#        response = requests.get(
#            Consts.URL['OPGG'].format(
#                ID=self.ID,
#                Role=self.Role,
#                elo=self.Elo
#              )
#        )
#        print response.url
#        return response.json()

GGtoken = (str)(raw_input('What is your Champion.GG API Key? '))
GGChamp1 = (str)(raw_input('What Champion do you play?  '))
#Add multiple Champions
GGRole = (str)(raw_input('Which Role do you play this champion in?  '))
GGRole = GGRole.upper()
GGask = (str)(raw_input('Would you like in input an Elo? (Yes or No)  '))
GGElo = (str)(raw_input('Which Tier do you want to compare to? Bronze, Silver, Gold, Platinum, or Diamond+ '))
GGElo = GGElo.upper()
GGLimit = (input('How many champion matchups do you want to compare? '))
if GGask == 'No':
    Playerelo = ''
else:
    ELO = (str)(input('Which then? BRONZE, SILVER, GOLD, PLATINUM  '))
    ELO = ELO.upper()
    Playerelo = "&elo=%s" % (ELO)

GGChamp1_ID = keys.KEYSCHAMP[GGChamp1]

R = requests.get('http://api.champion.gg/v2/champions/{ID}/{Role}/matchups?{playerelo}&api_key={APIKEY}&limit={Limit}'.format(
    ID=GGChamp1_ID,
    Role=GGRole,
    playerelo=Playerelo,
    APIKEY=GGtoken,
    Limit=GGLimit
    )
)
print (R.url)
print R.json()

GGList_1_ID=[['Champion 1','Win Rate','Champion 2','Total Games']]
GGList_1_NAME=[['Champion 1','Win Rate','Champion 2','Total Games']]
#GGList=[]


for x in range(0,GGLimit):
    try:
        t=R.json()[x]
    except IndexError:
        break
    Champ1=R.json()[x]['champ1_id']
    Champ1_name=keys.KEYSID[str(Champ1)]
    Champ2=R.json()[x]['champ2_id']
    Champ2_name=keys.KEYSID[str(Champ2)]
    Champ1_WR=R.json()[x]['champ1']['winrate']*100
    Champ2_WR=R.json()[x]['champ2']['winrate']*100
    TotalGames=(R.json()[x]['champ2']['wins']+R.json()[x]['champ1']['wins'])
    print "Champion: " + str(Champ1)
    print "Winrate: " + str(Champ1_WR)
    print "Against: " + str(Champ2)
    print "Total Games: " + str(TotalGames)
    print "Time for the next one!"
    if str(Champ1) == str(GGChamp1_ID):
        GGList_1_ID.append([Champ1,Champ1_WR,Champ2,TotalGames])
        GGList_1_NAME.append([Champ1_name,Champ1_WR,Champ2_name,TotalGames])
    else:
        GGList_1_ID.append([Champ2,Champ2_WR,Champ1,TotalGames])
        GGList_1_NAME.append([Champ2_name,Champ2_WR,Champ1_name,TotalGames])

print GGList_1_NAME
import csv
with open("output.csv","wb") as f:
    writer = csv.writer(f)
    writer.writerows(GGList_1_NAME)


T = requests.get('http://api.champion.gg/v2/champions?{playerelo}&champData=playrate,role&api_key={APIKEY}&limit={Limit}&sort=role-desc'.format(
    playerelo='elo=' + GGElo,
    APIKEY=GGtoken,
    Limit=1000
    )
)
print (T.url)
print T.json()

Playrate=[['Champion','Playrate']]

for y in range(0,1000):
    try:
        t=T.json()[y]
    except IndexError:
        break
    if str(T.json()[y]['role']) == str(GGRole):
        PRchamp = T.json()[y]['championId']
        PRplayrate = T.json()[y]['playRate']
        Playrate.append([PRchamp,PRplayrate])
    else:
        continue

print Playrate
