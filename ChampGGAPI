#Process:
###Grab winrates for currently played champions D+
###Grab most played champs in Elo
###Order your champs by winrate to most played in Elo
###Note any which have a negative winrate
#Suggest Champions to pickup for bad matchups


import requests
import Champkeys as keys
import csv
#import numpy as np
#import RiotConsts as Consts

# This section sets up our tables that we need
GGChamp_NMS = []
GGChamp_NMS_Keyed = []
GGChamp_IDS = []
GGCounters = []
Playrate_IDS = []#[['Champion', 'Play Rate', 'Role Rate', 'Percent played in Role']]
Playrate_NMS = []#[['Champion', 'Play Rate', 'Role Rate', 'Percent played in Role']]
GGList_1_IDS = []#[['Champion 1', 'Win Rate', 'Champion 2', 'Total Games']]
GGList_1_NMS = []#[['Champion 1', 'Win Rate', 'Champion 2', 'Total Games']]
Matchups_IDS = [['Opponents']]
Matchups_NMS = [['Opponents']]
Matchup_NMS_WR_Dict = {}
GGList_1_Class = []
GGList_1_Subclass = []

# This section takes inputs from the user
GGtoken = (str)(raw_input('What is your Champion.GG API Key? '))
GGRole = (str)(raw_input('Which Role do you play in (Top, Jungle, Middle, Duo_carry, Duo_support)?  '))
GGRole = GGRole.upper()
Champnum = (input('How many Champions do you want to compare? '))
for z in range(0,Champnum):
    GGChamp = (str)(raw_input('What Champion do you play?  '))
    GGChamp_NMS.append(GGChamp)
    Matchups_NMS[0].append(GGChamp)
    KEYID =keys.KEYSCHAMP[GGChamp]
    GGChamp_IDS.append(keys.KEYSCHAMP[GGChamp])
    Matchups_IDS[0].append(keys.KEYSCHAMP[GGChamp])
    GGChamp_NMS_Keyed.append(keys.KEYSID[KEYID])
GGask = (str)(raw_input('Would you like in input an Elo? (Yes or No)  '))
if GGask == 'No':
    Playerelo = ''
else:
    ELO = (str)(raw_input('Which then? BRONZE, SILVER, GOLD, PLATINUM  '))
    ELO = ELO.upper()
    Playerelo = "&elo=%s" % (ELO)
GGElo = (str)(raw_input('Which Tier do you want to compare to: Bronze, Silver, Gold, or Platinum? '))
GGElo = GGElo.upper()
GGLimit = (input('How many champion matchups do you want to compare? '))

### Create list with played champs and Class or Subclass
for i in range(0,Champnum):
    GGList_1_Class.append(keys.KEYSCLASS[GGChamp_NMS_Keyed[i]])
    GGList_1_Subclass.append(keys.KEYSSUBCLASS[GGChamp_NMS_Keyed[i]])

print (GGChamp_NMS_Keyed)
print (GGList_1_Class)
print (GGList_1_Subclass)

#This section does the request calls for data from Champion.gg API and creates tables and a .csv file
def champmatchuprequest(GGChamp1_ID, GGRole, Playerelo, GGtoken):
    R = requests.get('http://api.champion.gg/v2/champions/{ID}/{Role}/matchups?{playerelo}&api_key={APIKEY}&limit={Limit}'.format(
        ID=GGChamp1_ID,
        Role=GGRole,
        playerelo=Playerelo,
        APIKEY=GGtoken,
        Limit=500
        )
    )
    print (R.url)
    #print (R.json())

    for x in range(0,500):
        try:
            t=R.json()[x]
        except IndexError:
            break
        Champ1=R.json()[x]['champ1_id']
        Champ1_name=keys.KEYSID[str(Champ1)]
        Champ2=R.json()[x]['champ2_id']
        Champ2_name=keys.KEYSID[str(Champ2)]
        Champ1_WR=R.json()[x]['champ1']['winrate']*100
        Champ2_WR=R.json()[x]['champ2']['winrate']*100
        TotalGames=(R.json()[x]['champ2']['wins']+R.json()[x]['champ1']['wins'])
        #print "Champion: " + str(Champ1)
        #print "Winrate: " + str(Champ1_WR)
        #print "Against: " + str(Champ2)
        #print "Total Games: " + str(TotalGames)
        #print "Time for the next one!"
        if str(Champ1) == str(GGChamp1_ID):
            GGList_1_IDS.append([Champ1,Champ1_WR,Champ2,TotalGames])
            GGList_1_NMS.append([Champ1_name,Champ1_WR,Champ2_name,TotalGames])
            Matchup_NMS_WR_Dict[Champ1_name+Champ2_name] = Champ1_WR
        else:
            GGList_1_IDS.append([Champ2,Champ2_WR,Champ1,TotalGames])
            GGList_1_NMS.append([Champ2_name,Champ2_WR,Champ1_name,TotalGames])
            Matchup_NMS_WR_Dict[Champ2_name+Champ1_name] = Champ2_WR

    with open("Matchups1.csv","wb") as f:
        writer = csv.writer(f)
        writer.writerows(GGList_1_NMS)
def playraterequest(GGtoken, GGRole, GGElo):
    T = requests.get('http://api.champion.gg/v2/champions?{playerelo}&champData=playrate,role&api_key={APIKEY}&limit={Limit}&sort=playRate-desc'.format(
        playerelo='elo=' + GGElo,
        APIKEY=GGtoken,
        Limit=1000
        )
    )
    print (T.url)
    #print (T.json())

    for y in range(0, 1000):
        try:
            t = T.json()[y]
        except IndexError:
            break
        if str(T.json()[y]['role']) == str(GGRole):
            PRchamp = T.json()[y]['championId']
            PRchamp_name = keys.KEYSID[str(PRchamp)]
            PRplayrate = T.json()[y]['playRate']
            PRroleplayed = T.json()[y]['percentRolePlayed']
            PRrolerate = PRplayrate * PRroleplayed
            Playrate_IDS.append([PRchamp, PRplayrate, PRroleplayed, PRrolerate])
            Playrate_NMS.append([PRchamp_name, PRplayrate, PRroleplayed, PRrolerate])
        else:
            continue

    with open("Playrates.csv", "wb") as f:
        writer = csv.writer(f)
        writer.writerows(Playrate_NMS)

# Our Execution of the Functions we created
playraterequest(GGtoken, GGRole, GGElo)
for ID in range(0,Champnum):
    champmatchuprequest(GGChamp_IDS[ID], GGRole, Playerelo, GGtoken)

#Sort and FilterPlayrate
Playrate_IDS.sort(key=lambda row:row[3], reverse=True)
Playrate_NMS.sort(key=lambda row:row[3], reverse=True)
del Playrate_IDS[(GGLimit):]
del Playrate_NMS[(GGLimit):]
#Sort GGLists
GGList_1_IDS.sort(key=lambda row:row[3], reverse=True)
GGList_1_NMS.sort(key=lambda row:row[3], reverse=True)



# A Double Check of all our Tables
#print (GGChamp_NMS)
#print (GGChamp_NMS_Keyed)
#print (GGChamp_IDS)
#print (Playrate_IDS)
#print (Playrate_NMS)
#print (GGList_1_IDS)
#print (GGList_1_NMS)
#print (Matchup_NMS_WR_Dict)
#print (GGList_1_NMS)
#print (GGList_1_Class)
#print (GGList_1_Subclass)
print (Matchups_IDS)
print (Matchups_NMS)

###Create Matchup Table
def makematchups(Champnum,Index,Matchup_NMS_WR_Dict,GGChamp_NMS,Matchups_NMS,Matchups_IDS):
    Opp_Line_IDS = []
    Opp_Line_NMS = []
###Find the first entry from playrate_IDS (Opponent Name)
    Opp_IDS = Playrate_IDS[Index][0]
    Opp_NMS = Playrate_NMS[Index][0]
    Opp_Line_NMS.append(Opp_NMS)
    Opp_Line_IDS.append(Opp_IDS)
###Find index 1 from GGList_1_IDs, where index 2 = first entry and index 0 = matchup_IDS index 1 (Champ 1 Winrate)
###Find index 1 from GGList_1_IDs, where index 2 = first entry and index 0 = matchup_IDS index ... (Champ ... Winrate)
    for i in range (0,Champnum):
        try:
            Matchup_NMS_WR_Dict[GGChamp_NMS[i] + Opp_NMS]
        except KeyError:
            Opp_Line_NMS.append('')
            Opp_Line_IDS.append('')
            continue
        Champ_i_WR = Matchup_NMS_WR_Dict[GGChamp_NMS[i]+Opp_NMS]
###If Winrate is >49% append to list, otherwise write 'Countered'
        if Champ_i_WR > 49:
            Opp_Line_NMS.append(Champ_i_WR)
            Opp_Line_IDS.append(Champ_i_WR)
        else:
            Opp_Line_NMS.append('')
            Opp_Line_IDS.append('')
###append a line to the matchup lists
    Matchups_NMS.append(Opp_Line_NMS)
    Matchups_IDS.append(Opp_Line_IDS)

for Index in range(0,GGLimit):
    makematchups(Champnum,Index,Matchup_NMS_WR_Dict,GGChamp_NMS_Keyed,Matchups_NMS,Matchups_IDS)

# A Double Check our Tables
print (Matchups_IDS)
print (Matchups_NMS)

with open("Matchups.csv", "wb") as f:
    writer = csv.writer(f)
    writer.writerows(Matchups_NMS)

###Create list of Champions (index 0 of Matchup_IDS) with nothing in indexes 1-Champnum
for i in range(1,GGLimit):
    if any(Matchups_IDS[i][1:]):
        continue
    else:
        GGCounters.append(Matchups_IDS[i][0])
print (GGCounters)

### Clear our tables
GGList_1_NMS =[]
GGList_1_IDS = []

###Find Matchups for champs to counter
for ID in range(0,len(GGCounters)):
    champmatchuprequest(GGCounters[ID], GGRole, Playerelo, GGtoken)

### Double check our tables
print (GGList_1_IDS)
print (GGList_1_NMS)
print (Matchup_NMS_WR_Dict)

### Create variable for how much Bias you want in the system as a percentage, then replace the 49 in 'makematchups' with it
###
### Final Equation is sum of[(((50+Bias)-WR)*(% of Games)*(Percentage played in Role)^2*100)^(1/3)] for each champion in GGList_1_NMS
### 50 is nominal winrate
### Bias is user defined
### WR is GGList_1_NMS[i][2]
### % of games is GGList_1_NMS[i][4] / (sum GGList_1_NMS[i][4] where GGList_1_NMS[i][1] is the same champion)
### Percentage played in Role is Playrate_NMS[i][4] where i is the champion
###
### Next identify the Class for each champion using Keys.keysclass or keys.keyssubclass
### Give a list sorted by class, and maybe filter out any class which user already plays? or at least mention it.
